@typeparam TRole where TRole : WatchIt.Common.Model.Roles.IRoleResponse, WatchIt.Common.Query.IQueryOrderable<TRole>
@typeparam TQuery where TQuery : WatchIt.Common.Query.QueryParameters<TRole>
@typeparam TRoleParent



@if (_loaded)
{
    if (_roles.Count > 0)
    {
        <div class="vstack">
            @for (int i = 0; i < _roles.Count; i++)
            {
                {
                    int iCopy = i;
                    KeyValuePair<TRole, TRoleParent> roleParentPair = _roles.ElementAt(i);
                    TRole role = roleParentPair.Key;
                    TRoleParent parent = roleParentPair.Value;
                    string url = string.Format(ParentUrlTemplate, ParentItemIdSource(role));
                    if (i > 0)
                    {
                        <hr/>
                    }
                    <ListItemComponent Name="@(NameSource(role, parent))"
                                       AdditionalInfo="@(AdditionalInfoSource is not null ? AdditionalInfoSource(role, parent) : null)"
                                       PosterPlaceholder="@(PosterPlaceholder)"
                                       PosterDownloadingTask="@(action => PosterDownloadingTask(ParentItemIdSource(role), action))"
                                       GetGlobalRatingMethod="@(action => GetGlobalRatingMethod(role.Id, action))"
                                       GetUserRatingMethod="@((user, actionSuccess, actionNotFound) => GetUserRatingMethod(role.Id, user, actionSuccess, actionNotFound))"
                                       PutRatingMethod="@(request => PutRatingMethod(role.Id, request))"
                                       DeleteRatingMethod="@(() => DeleteRatingMethod(role.Id))"
                                       ItemUrl="@(url)"
                                       PosterHeight="110"
                                       NameSize="20"
                                       OnRatingChanged="@(OnRatingChanged)"/>
                } 
            }
            @if (!_allItemsLoaded)
            {
                <div class="d-flex justify-content-center">
                    <button class="btn btn-secondary" @onclick="@(async () => await GetRoles())">
                        <LoadingButtonContentComponent Content="Load more"
                                                       LoadingContent="Loading..."
                                                       IsLoading="@(_rolesFetching)"/>
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <span class="text-center">No roles found</span>
    }
}
else
{
    <LoadingComponent Color="LoadingComponent.LoadingComponentColors.Light"/>
}