@typeparam TRole where TRole : WatchIt.Common.Model.Roles.IRoleResponse, WatchIt.Common.Query.IQueryOrderable<TRole>
@typeparam TQuery where TQuery : WatchIt.Common.Query.QueryParameters<TRole>

@if (_loaded)
{
    if (_roles.Count > 0)
    {
        <div class="vstack">
            @for (int i = 0; i < _roles.Count; i++)
            {
                if (i > 0)
                {
                    <hr/>
                }
                <a class="text-reset text-decoration-none" href="/person/@(_roles[i].PersonId)">
                    <RoleComponent TRole="TRole"
                                   Role="@(_roles[i])"/>
                </a>
            }
            @if (!_allItemsLoaded)
            {
                <div class="d-flex justify-content-center">
                    <button class="btn btn-secondary" @onclick="@(async () => await GetRoles())">
                        <LoadingButtonContentComponent Content="Load more"
                                                       LoadingContent="Loading..."
                                                       IsLoading="@(_rolesFetching)"/>
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <span class="text-center">No roles found</span>
    }
}
else
{
    <LoadingComponent/>
}