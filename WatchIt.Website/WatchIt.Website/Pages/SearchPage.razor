@using WatchIt.Common.Model.Movies
@using WatchIt.Common.Model.Persons
@using WatchIt.Common.Model.Series
@using WatchIt.Website.Components.Pages.SearchPage.Panels

@layout MainLayout

@page "/search/{query}"

<PageTitle>WatchIt - Searching "@(Query)"</PageTitle>



<div class="vstack gap-default">
    <div class="rounded-3 panel panel-regular p-3">
        <div class="d-flex justify-content-center">
            <h3 class="m-0">
                <strong>Search results for phrase:</strong> "@(DecodedQuery)"
            </h3>
        </div>
    </div>
    <SearchResultPanelComponent TItem="MovieResponse"
                                TQuery="MovieQueryParameters"
                                Title="Movies"
                                UrlIdTemplate="/media/{0}"
                                IdSource="@(item => item.Id)"
                                NameSource="@(item => item.Title)"
                                AdditionalNameInfoSource="@(item => item.ReleaseDate.HasValue ? $" ({item.ReleaseDate.Value.Year})" : null)"
                                RatingSource="@(item => item.Rating)"
                                Query="@(new MovieQueryParameters { Title = DecodedQuery, OrderBy = "rating.count" })"
                                ItemDownloadingTask="@(MoviesWebAPIService.GetAllMovies)"
                                PictureDownloadingTask="@((id, action) => MediaWebAPIService.GetMediaPoster(id, action))"
                                PosterPlaceholder="/assets/media_poster.png"
                                GetGlobalRatingMethod="@((id, action) => MediaWebAPIService.GetMediaRating(id, action))"
                                GetUserRatingMethod="@((id, userId, successAction, notfoundAction) => MediaWebAPIService.GetMediaRatingByUser(id, userId, successAction, notfoundAction))"
                                PutRatingMethod="@((id, request) => MediaWebAPIService.PutMediaRating(id, request))"
                                DeleteRatingMethod="@(id => MediaWebAPIService.DeleteMediaRating(id))"/>
    <SearchResultPanelComponent TItem="SeriesResponse"
                                TQuery="SeriesQueryParameters"
                                Title="TV series"
                                UrlIdTemplate="/media/{0}"
                                IdSource="@(item => item.Id)"
                                NameSource="@(item => item.Title)"
                                AdditionalNameInfoSource="@(item => item.ReleaseDate.HasValue ? $" ({item.ReleaseDate.Value.Year})" : null)"
                                RatingSource="@(item => item.Rating)"
                                Query="@(new SeriesQueryParameters { Title = DecodedQuery, OrderBy = "rating.count" })"
                                ItemDownloadingTask="@(SeriesWebAPIService.GetAllSeries)"
                                PictureDownloadingTask="@((id, action) => MediaWebAPIService.GetMediaPoster(id, action))"
                                PosterPlaceholder="/assets/media_poster.png"
                                GetGlobalRatingMethod="@((id, action) => MediaWebAPIService.GetMediaRating(id, action))"
                                GetUserRatingMethod="@((id, userId, successAction, notfoundAction) => MediaWebAPIService.GetMediaRatingByUser(id, userId, successAction, notfoundAction))"
                                PutRatingMethod="@((id, request) => MediaWebAPIService.PutMediaRating(id, request))"
                                DeleteRatingMethod="@(id => MediaWebAPIService.DeleteMediaRating(id))"/>
    <SearchResultPanelComponent TItem="PersonResponse"
                                TQuery="PersonQueryParameters"
                                Title="People"
                                UrlIdTemplate="/person/{0}"
                                IdSource="@(item => item.Id)"
                                NameSource="@(item => item.Name)"
                                RatingSource="@(item => item.Rating)"
                                Query="@(new PersonQueryParameters { Name = DecodedQuery, OrderBy = "rating.count" })"
                                ItemDownloadingTask="@(PersonsWebAPIService.GetAllPersons)"
                                PictureDownloadingTask="@((id, action) => PersonsWebAPIService.GetPersonPhoto(id, action))"
                                PosterPlaceholder="/assets/person_poster.png"
                                GetGlobalRatingMethod="@((id, action) => PersonsWebAPIService.GetPersonGlobalRating(id, action))"/>
</div>